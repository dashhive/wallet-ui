main form {
  display: flex;
  gap: .5rem;
  padding: 0 2rem;
  /* flex-direction: column; */
  /* margin: 0 auto;
  justify-content: center; */
}

form fieldset {
  position: relative;
  border: 0;
  display: flex;
  flex-direction: column;
  min-width: 200px;
  /* width: 100%; */
  justify-content: left;
  gap: 1.5rem;
  padding: 0;
}
form fieldset:disabled {
  opacity: .3;
}
form:has(> fieldset legend) {
  margin-top: 2rem;
}
form fieldset:has(> legend) {
  border: 1px solid var(--ch);
  padding: 1rem;
  margin-top: -.65rem;
}
form fieldset legend {
  font-weight: 400;
  font-size: 1.3rem;
}
form fieldset svg {
  margin: 0;
  max-width: max-content;
  /* height: 100%;
  width: 100%; */
  cursor: pointer;
}
form fieldset:last-of-type:has(> button) {
  flex-direction: row;
  justify-content: center;
}
form fieldset div[data-prefix] {
  position: relative;
}
form fieldset div[data-prefix]::before {
  content: attr(data-prefix);
  position: absolute;
  display: flex;
  color: var(--dark-500);
  padding: 1rem;
  line-height: 1;
}
form fieldset div[data-prefix]:has(> input:focus:not(:placeholder-shown))::before {
  color: var(--fc);
}
form fieldset div[data-prefix] > input {
  padding-left: 2rem;
}
/* form fieldset div[data-prefix] > input:focus:placeholder-shown {
  padding-left: 2rem;
}
form fieldset div[data-prefix] > input:focus:not(:placeholder-shown) {
  padding-left: 2rem;
} */
form fieldset .password {
  /* background-color: var(--c); */
  display: flex;
  flex-direction: row;
  /* border-radius: 6.25rem; */
  align-items: center;
  width: 100%;
}
form fieldset div.input {
  display: flex;
  flex-direction: row;
  align-items: center;
}
form fieldset div:has(input),
form fieldset div:has(input + button),
form fieldset div:has(input + label),
form fieldset div:has(label + input) {
  /* background-color: var(--c); */
  display: flex;
  flex-direction: row;
  /* border-radius: 6.25rem; */
  align-items: center;
}
form fieldset div > input {
  flex: 1 1 auto;
  border-radius: 6.25rem;
  border: 1px solid var(--dark-600);
}
form fieldset .password > input {
  flex: 1 1 auto;
  /* border-top-left-radius: 6.25rem;
  border-bottom-left-radius: 6.25rem; */
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  border: 1px solid var(--dark-600);
  border-right: 0 solid transparent;
}
form fieldset .password > input + label {
  border: 1px solid var(--dark-600);
  border-left: 0 solid transparent;
  flex: 1 1 auto;
  background-color: var(--c);
  color: var(--dark-500);
  height: 3rem;
  min-width: min-content;
  border-radius: 6.25rem;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  padding: 0 1.2rem;
  transition: color var(--ease);
}
form fieldset div > input:has(+ label),
form fieldset div > input[type="text"]:has(+ label),
form fieldset div > input[type="password"]:has(+ label) {
  flex: 1 1 auto;
  /* border-top-left-radius: 6.25rem;
  border-bottom-left-radius: 6.25rem; */
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  border: 1px solid var(--dark-600);
  border-right: 0 solid transparent;
}
form fieldset div > input + button {
  margin-left: .5rem;
  padding: 0.63rem;
}
form fieldset div > input + label,
form fieldset div > input[type="text"] + label,
form fieldset div > input[type="password"] + label {
  border: 1px solid var(--dark-600);
  border-left: 0 solid transparent;
  flex: 1 1 auto;
  background-color: var(--c);
  color: var(--dark-500);
  height: 3rem;
  min-width: min-content;
  border-radius: 6.25rem;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  padding: 0 1.2rem;
  transition: color var(--ease);
}
form fieldset div > input:not(:focus):not(:placeholder-shown):invalid + label {
  border: 1px solid var(--inpbdi);
  border-left: 0 solid transparent;
}
form fieldset .password > input:not(:disabled) + label:hover,
form fieldset div > input + button:not(:disabled):hover,
form fieldset div > input:not(:disabled) + label:hover,
form fieldset div > input[type="text"]:not(:disabled) + label:hover,
form fieldset div > input[type="password"]:not(:disabled) + label:hover {
  background-color: var(--c);
  color: var(--fc);
}
/* form fieldset:has(.field) {
  flex: 1 1 50%;
} */

form .field {
  display: flex;
  flex-direction: column;
  border: 1px solid transparent;
  border-radius: 1.5rem;
  padding: 1rem 1.5rem;
  margin-top: 3rem;
  flex: 0;
  max-width: 30rem;
  min-width: initial;
  align-self: center;
  align-items: flex-start;
}
form .field > div {
  display: flex;
}
form .field > div > label + input {
  background-color: transparent;
  border: 1px solid transparent;
  font-size: 3.75rem;
  font-weight: 800;
  padding: 0;
  border-radius: 0;
  color: var(--f);
  flex: 1 1 auto;
}
form .field > div > label:has(+ input) {
  min-width: initial;
}
form .field:has(> div > label + input:focus) {
  border: 1px solid var(--dark-200);
}
form > article {
  display: flex;
  font-size: 1.25rem;
  color: var(--f);
  padding: 0 4rem;
}
form > aside > article > figure,
form > article > figure {
  align-items: flex-start;
  align-self: auto;
  row-gap: .25rem;
  flex: none;
  max-width: 100%;
  word-break: break-all;
}
form aside > article > figure figcaption:has(+ div),
form > article > figure figcaption:has(+ div) {
  font-size: .75rem;
  font-weight: 500;
  line-height: 1;
}
form aside > article > figure figcaption + div,
form > article > figure figcaption + div {
  display: flex;
  line-height: 1;
  margin: 0;
  text-align: left;
  color: inherit;
}
form aside > article > figure figcaption + div.big,
form > article > figure figcaption + div.big {
  font-size: 3.75rem;
  font-weight: 800;
}
form aside > article > figure figcaption + div svg,
form > article > figure figcaption + div svg {
  align-self: center;
  margin-right: 1rem;
}
form aside > article > figure figcaption + div sub,
form > article > figure figcaption + div sub {
  align-self: self-end;
  font-size: 2.75rem;
}

/* form fieldset div > input + button i {
  fill: currentColor;
  color: var(--fc);
} */
/* form fieldset:last-of-type:has(> [type=reset]) {
  justify-content: space-between;
} */

form fieldset.share {
  /* flex-direction: row-reverse; */
  flex-direction: row;
  align-items: center;
  flex: none;
}
form fieldset.share aside {
  display: flex;
  flex: 1 1 auto;
  flex-direction: column;
  justify-content: center;
  align-self: stretch;
  align-items: center;
  text-align: center;
  padding-left: 2rem;
  padding-right: 1rem;
  gap: 1rem;
}
form fieldset.share aside input:read-only {
  text-align: center;
}
form fieldset.share section + aside {
  max-width: 16rem;
  /* max-width: 305px; */
  border-left: 1px solid var(--dark-600);
}
form fieldset.share aside label {
  display: block;
  width: 100%;
  padding: 0;
  color: inherit;
  /* margin-bottom: 2rem; */
}
form fieldset.share aside svg {
  height: 100%;
  width: 100%;
}



.password label {
  cursor: pointer;
}
.password label svg {
  display: none;
}
.password label svg use {
  align-content: center;
  align-items: center;
  align-self: center;
  justify-content: center;
  justify-items: center;
  justify-self: center;
  flex: 1 1 auto;
}
.password label input[type=checkbox][name=show_pass]:not(:checked) ~ .closed-eye,
.password label input[type=checkbox][name=show_pass]:checked ~ .open-eye {
  display: flex;
}
label:has(> input[type=checkbox][name=show_pass]) svg {
  display: none;
}
label:has(> input[type=checkbox][name=show_pass]) svg use {
  align-content: center;
  align-items: center;
  align-self: center;
  justify-content: center;
  justify-items: center;
  justify-self: center;
  flex: 1 1 auto;
}
label:has(> input[type=checkbox][name=show_pass]:not(:checked)) .closed-eye,
label:has(> input[type=checkbox][name=show_pass]:checked) .open-eye {
  display: flex;
}

button {
  display: flex;
  justify-content: center;
  align-items: center;
  column-gap: .25rem;
  background-color: var(--brand-blue);
  border: 0 solid transparent;
  color: var(--fc);
  padding: 0.63rem 1rem;
  font-size: 1.1em;
  font-weight: 500;
  font-family: inherit;
  cursor: pointer;
  /* transition: border-color 0.25s; */
  transition: color var(--ease),
    border-color var(--ease),
    background-color var(--ease);
}

button.outline {
  background-color: transparent;
  border: 1px solid var(--dark-200);
  color: var(--dark-200);
}
button.rounded {
  border-radius: 2rem;
}
button.rounded:has(+ button.rounded) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
button.rounded:not(:last-of-type) {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
button.rounded:not(:first-of-type) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}
header button.rounded:not(:last-of-type),
header button.rounded:not(:first-of-type) {
  border-radius: 2rem;
}
button.pill,
button.link {
  background-color: transparent;
  color: var(--fc);
  display: inline-flex;
}
button.pill {
  display: flex;
  column-gap: .25rem;
}

button[type=submit] {
  /* place-self: end; */
  justify-self: end;
}
button[type=reset] {
  place-self: start;
  justify-self: start;
  color: var(--note);
  border-color: var(--note);
  border-width: 0;
}
button:disabled {
  /* background-color: var(--d); */
  color: var(--note);
  border-color: var(--note);
  cursor: not-allowed;
}
button:not(:disabled):focus,
button:not(:disabled):hover {
  background-color: var(--brand-blue-highlight);
  color: var(--f);
  border-color: var(--f);
}
button:not(:disabled):focus,
button:not(:disabled):focus-visible {
  /* outline: 4px auto -webkit-focus-ring-color; */
  /* outline: 0 auto -webkit-focus-ring-color; */
}
button[type=reset]:not(:disabled):focus,
button[type=reset]:not(:disabled):hover {
  /* background-color: var(--c); */
  color: var(--dang);
  border-color: var(--dang);
}
button.pill:not(:disabled):focus,
button.pill:not(:disabled):hover {
  background-color: var(--dark-600);
}
button.outline:not(:disabled):focus,
button.outline:not(:disabled):hover {
  background-color: var(--brand-blue);
  border: 1px solid var(--brand-blue);
  color: var(--f);
}


input, select, textarea {
  background-color: var(--c);
  color: var(--fc);
  border: 1px solid var(--ch);
  /* text-align: center; */
  line-height: 1;
  /* font-size: 1.5rem; */
  font-size: .875rem;
  width: 100%;
  height: 3rem;
  /* max-width: 24rem; */
  outline: 0;
  text-align: left;
  padding: 1rem;
  flex: 0 0 auto;
}
input::placeholder {
  color: var(--dark-500);
}
input:not(:focus):not(:placeholder-shown):invalid {
  border-color: var(--inpbdi);
  outline: var(--inpbdi);
}
textarea {
  padding: 1rem;
  min-width: 100%;
  max-width: 100%;
  min-height: 4rem;
}

label {
  /* line-height: 3rem; */
  display: flex;
  flex-direction: row;
  align-items: center;
  user-select: none;
  min-width: 64px;
  gap: 1rem;
  justify-content: inherit;
}
label > input[type=checkbox],
label + input[type=checkbox] {
  width: 2rem;
}

div.switch {
  display: flex;
}

.switch input[type=checkbox] {
  display: none;
}
input[type=checkbox]:has(+ label.switch) {
  display: none;
}

label.switch {
  position: relative;
  display: inline-block;
  width: 64px;
  height: 32px;
  background-color: var(--c);
  border-radius: 32px;
  transition: background-color 0.3s;
  min-width: unset;
  box-sizing: border-box;
  border: 0;
  cursor: pointer;
  flex: none;
}
label.switch::after {
  content: '';
  position: absolute;
  width: 26px;
  height: 26px;
  border-radius: 26px;
  background-color: var(--note);
  top: 3px;
  left: 3px;
  transition: all 0.3s;
}
label.switch:active::after {
	width: 36px;
  background-color: var(--f);
}

input[type=checkbox]:checked + label.switch::after {
  left: calc(100% - 3px);
	transform: translateX(-100%);
  background-color: var(--f);
}

input[type=checkbox]:checked + label.switch {
  background-color: var(--succ);
}




label:has(+ input[type=checkbox]) {
  flex: 1 1 auto;
  font-weight: 400;
  font-size: 1.3rem;
  justify-content: space-between;
}
fieldset label:has(+ input[type=checkbox]) {
  justify-content: center;
}
fieldset .switch label:first-of-type {
  flex: 1 1 auto;
  font-weight: 400;
  font-size: 1.3rem;
}
fieldset .switch input[type=checkbox] {
  justify-content: center;
}
fieldset .switch input[type=checkbox] + .switch {
  justify-content: left;
}
label > input[type=checkbox][name=show_pass] {
  display: none;
  width: 0;
}
/* input:has(+ label > input[type=checkbox][name=show_pass]) {
  padding-right: 3rem;
}
label:has(> input[type=checkbox][name=show_pass]) {
  position: relative;
  margin-top: -3.5rem;
  height: 3rem;
  width: 3rem;
  right: 0rem;
  min-width: auto;
  place-self: end;
  justify-content: center;
  background-color: var(--c);
  border: 1px solid var(--ch);
  border-left: 0 solid transparent;
  flex: 0 0 auto;
}
label:has(> input[type=checkbox][name=show_pass])::after {
  display: flex;
  content: '👁';
  color: var(--note);
}
label:has(> input[type=checkbox][name=show_pass]:checked)::after {
  color: var(--l);
}
input:has(+ label > input[type=checkbox][name=show_pass]):focus-visible,
input:focus-visible + label:has(> input[type=checkbox][name=show_pass]) {
  border-color: var(--l);
} */
label[for],
label:has(> input) {
  cursor: pointer;
}
fieldset:not(:disabled) label[for]:not(.disabled),
fieldset:not(:disabled) label:has(> input:not(:disabled)) {
  cursor: pointer;
}
form[name="network"] {
  justify-content: center;
}

.center form {
  width: 100%;
  flex-direction: column;
  margin-bottom: 0;
}
.center input {
  max-width: initial;
  line-height: 2;
}

.scanner {
  height: 21.5rem;
  width: 100%;
  background-color: var(--nav-bg);
  color: var(--dark-100);
  border-radius: 1rem;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  user-select: none;
  min-height: 100px;
  gap: 1rem;
  overflow: hidden;
}
.scanner video {
  max-height: 100%;
}
.updrop {
  color: var(--dark-200);
  border: 2px dashed var(--dark-500);
  border-radius: 1rem;
  height: 12rem;
  width: 100%;
  font-weight: 400;
  font-size: .9rem;
  line-height: 1.3;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  user-select: none;
  min-height: 100px;
  gap: 1.5rem;
  margin-bottom: 2.5rem;
  cursor: pointer;
  text-transform: none;
}
.updrop.drag-over {
  border-style: solid;
}
.dropped .updrop,
.updrop.dropped {
  background-color: var(--dark-900);
  border: 2px solid var(--dark-600);
}
.updrop input[type=file] {
  width: 0.1px;
  height: 0.1px;
  opacity: 0;
  overflow: hidden;
  position: absolute;
  z-index: -1;
}
.updrop * {
  pointer-events: none;
}
.updrop svg {
  color: var(--dark-500);
}
.updrop span {
  max-width: 12rem;
  text-align: left;
}
.updrop span button {
  padding: 0;
}
.updrop[for="keystore"] {
  margin-bottom: 0;
  min-height: 60px;
  height: 6rem;
}
.updrop[for="keystore"] span {
  max-width: inherit;
  text-align: center;
  flex: 1 1 auto;
  margin-right: 40px;
}
.updrop[for="keystore"] span strong {
  font-size: 1rem;
  line-height: 2;
}

.dropped ~ article,
.updrop.disabled {
  opacity: .35;
  cursor: default;
}


@media (min-width: 650px) {
  main form {
    padding: 0;
  }
  section > header > form {
    justify-content: end;
    align-self: center;
  }
  section > header > form fieldset {
    justify-content: end !important;
  }
  section > article > form {
    background-color: var(--co);
    padding: 1rem;
    position: relative;
  }
}